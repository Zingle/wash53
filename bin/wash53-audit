#!/usr/bin/env node

const getopt = require("node-getopt");
const fetch = require("node-fetch");
const sdk = require("aws-sdk");
const {AsyncAWS} = require("..");
const wash53 = new AsyncAWS(sdk);

const helptpl = `
Usage: wash53-audit [OPTION]
Audit Route53 for unused records.

[[OPTIONS]]`.trim() + "\n";

const cli = [
    ["h",   "help",     "display this help"],
    ["I",   "ignore=",  "URL of records to ignore"],
    ["R",   "region=+", "match DNS records for one region"],
    ["v",   "verbose+", "write more info to terminal"],
    ["Z",   "zone=+",   "audit specified Route53 zone"]
];

const {options} = getopt.create(cli).setHelp(helptpl).bindHelp().parseSystem();

if (!options.verbose || options.verbose.length < 2) console.debug = () => {};
if (!options.verbose) console.info = () => {};

(async () => {
    const ips = new Set();
    const domains = new Set();
    const hosts = new Set();
    const ignores = new Set();
    const records = {A: new Map(), AAAA: new Map(), CNAME: new Map()};

    if (options.ignore) {
        const res = await fetch(options.ignore);
        const body = await res.text();
        const lines = body.split("\n").map(s => s.trim()).filter(v => v);
        const data = lines.filter(line => line[0] !== "#");
        const values = data.map(line => line.split(/\s+/, 1)[0]);
        values.forEach(value => ignores.add(value));
    }

    console.debug("fetching instances");

    for await (const region of wash53.regions()) {
        if (options.region && !options.region.includes(region)) {
            continue;
        }

        console.info(`fetching instances in ${region}`);

        for await (const instance of wash53.instances(region)) {
            const tags = AsyncAWS.readTags(instance);
            const ident = tags.Name || instance.InstanceId;
            const addrs = [];

            if (instance.PublicIpAddress) addrs.push(instance.PublicIpAddress);
            if (instance.PrivateIpAddress) addrs.push(instance.PrivateIpAddress);

            for (const {Ipv6Addresses} of instance.NetworkInterfaces) {
                for (const {Ipv6Address} of Ipv6Addresses) {
                    ips.add(Ipv6Address);
                }
            }

            for (const addr of addrs) {
                console.debug(" ", addr, "attached to", ident);
                ips.add(addr);
            }
        }
    }

    console.debug("fetching DNS records");

    for await (const {Id: zone, Name: domain} of wash53.zones()) {
        if (options.zone && !options.zone.includes(zone)) {
            continue;
        }

        console.info(`fetching DNS records from ${zone}`);

        domains.add(domain);

        for await (const record of wash53.records(zone)) {
            const {Name, Type, ResourceRecords} = record;

            if (!records[Type]) {
                continue;
            }

            for (const {Value} of record.ResourceRecords) {
                console.debug(" ", Type, Name, Value);

                if (!records[Type].has(Name)) {
                    records[Type].set(Name, new Set());
                }

                records[Type].get(Name).add(Value);
            }
        }
    }

    console.info("auditing DNS A records");

    for (const [name, values] of records.A.entries()) {
        for (const value of values) {
            if (!ips.has(value) && !ignores.has(value) && !domains.has(name)) {
                console.log("DELETE A", name, value);
            } else {
                hosts.add(name);
            }
        }
    }

    console.info("auditing DNS AAAA records");

    for (const [name, values] of records.AAAA.entries()) {
        for (const value of values) {
            if (!ips.has(value) && !ignores.has(value) && !domains.has(name)) {
                console.log("DELETE AAAA", name, value);
            } else {
                hosts.add(name);
            }
        }
    }

    console.info("auditing DNS CNAME records");

    for (const [name, values] of records.CNAME.entries()) {
        for (const value of values) {
            if (!hosts.has(value) && !ignores.has(value)) {
                console.log("DELETE CNAME", name, value);
            }
        }
    }
})().catch(console.error);
